#!/usr/bin/env node

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –≥–æ–ª–æ—Å—ñ–≤ TTS API
 * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –≥–æ–ª–æ—Å—ñ–≤
 */

import { writeFileSync } from 'fs';

const API_BASE = 'https://8a42c760f69d.ngrok-free.app/tts';

// –î–æ—Å—Ç—É–ø–Ω—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –≥–æ–ª–æ—Å–∏
const UKRAINIAN_VOICES = [
    {
        name: 'anatol',
        gender: '—á–æ–ª–æ–≤—ñ—á–∏–π',
        description: '–ê–Ω–∞—Ç–æ–ª—å - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —á–æ–ª–æ–≤—ñ—á–∏–π –≥–æ–ª–æ—Å'
    },
    {
        name: 'natalia', 
        gender: '–∂—ñ–Ω–æ—á–∏–π',
        description: '–ù–∞—Ç–∞–ª—è - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –∂—ñ–Ω–æ—á–∏–π –≥–æ–ª–æ—Å'
    }
];

// –¢–µ—Å—Ç–æ–≤—ñ —Ñ—Ä–∞–∑–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (—Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–æ–≤–∞–Ω—ñ)
const TEST_PHRASES = [
    {
        text: 'Vitayu%21%20Mene%20zvaty%20',
        description: '–í—ñ—Ç–∞–Ω–Ω—è'
    },
    {
        text: 'Ya%20hovoryu%20ukrainskoyu%20movoyu',
        description: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞'
    },
    {
        text: 'Tsey%20ukrainsky%20syntez%20movlennya',
        description: '–û–ø–∏—Å TTS'
    },
    {
        text: 'Kyiv%20-%20stolytsa%20Ukrainy',
        description: '–ü—Ä–æ –ö–∏—ó–≤'
    },
    {
        text: 'Slava%20Ukraini%21',
        description: '–ü–∞—Ç—Ä—ñ–æ—Ç–∏—á–Ω–µ –≥–∞—Å–ª–æ'
    }
];

// –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≥—É—á–Ω–æ—Å—Ç—ñ
const VOLUME_TESTS = [
    { scale: 0.5, description: '–¢–∏—Ö–æ' },
    { scale: 1.0, description: '–ù–æ—Ä–º–∞–ª—å–Ω–æ' },
    { scale: 1.5, description: '–ì—É—á–Ω–æ' },
    { scale: 2.0, description: '–î—É–∂–µ –≥—É—á–Ω–æ' }
];

async function downloadAudio(url, filename) {
    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const arrayBuffer = await response.arrayBuffer();
        const buffer = Buffer.from(arrayBuffer);
        
        writeFileSync(filename, buffer);
        console.log(`‚úÖ ${filename} (${buffer.length} –±–∞–π—Ç)`);
        return true;
    } catch (error) {
        console.log(`‚ùå ${filename}: ${error.message}`);
        return false;
    }
}

async function testVoices() {
    console.log('üéôÔ∏è  –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –≥–æ–ª–æ—Å—ñ–≤ TTS\n');
    
    let successCount = 0;
    let totalTests = 0;
    
    // –¢–µ—Å—Ç—É—î–º–æ –∫–æ–∂–µ–Ω –≥–æ–ª–æ—Å –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏
    for (const voice of UKRAINIAN_VOICES) {
        console.log(`\nüë§ –ì–æ–ª–æ—Å: ${voice.name} (${voice.gender})`);
        console.log(`   ${voice.description}\n`);
        
        for (const phrase of TEST_PHRASES) {
            const url = `${API_BASE}?text=${phrase.text}${voice.name}&voice=${voice.name}`;
            const filename = `ukrainian_${voice.name}_${phrase.description.replace(/\s+/g, '_')}.mp3`;
            
            console.log(`   üîä ${phrase.description}...`);
            const success = await downloadAudio(url, filename);
            
            totalTests++;
            if (success) successCount++;
            
            // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 500));
        }
    }
    
    return { successCount, totalTests };
}

async function testVolumeScales() {
    console.log('\nüîä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–≤–Ω—ñ–≤ –≥—É—á–Ω–æ—Å—Ç—ñ\n');
    
    const testText = 'Test%20guchnoti%20ukrainskoyu';
    let volumeSuccess = 0;
    
    for (const volumeTest of VOLUME_TESTS) {
        const url = `${API_BASE}?text=${testText}&voice=natalia&scale=${volumeTest.scale}`;
        const filename = `volume_test_${volumeTest.scale}.mp3`;
        
        console.log(`   üì¢ ${volumeTest.description} (${volumeTest.scale})...`);
        const success = await downloadAudio(url, filename);
        
        if (success) volumeSuccess++;
        await new Promise(resolve => setTimeout(resolve, 300));
    }
    
    return volumeSuccess;
}

async function createDemoPlaylist() {
    console.log('\nüéµ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ–º–æ-–ø–ª–µ–π–ª—ñ—Å—Ç–∞\n');
    
    const demoTexts = [
        { text: 'Vitayu%21%20Ya%20ukrainsky%20syntez%20movlennya', voice: 'anatol', name: 'demo_intro_anatol' },
        { text: 'Mene%20zvaty%20Natalya%20i%20ya%20zhinochyy%20holos', voice: 'natalia', name: 'demo_intro_natalia' },
        { text: 'My%20pidtrymuyemo%20ukrainsku%20movu', voice: 'anatol', name: 'demo_support' },
        { text: 'D—è–∫uyu%20za%20uvagu%21', voice: 'natalia', name: 'demo_thanks' }
    ];
    
    let demoSuccess = 0;
    
    for (const demo of demoTexts) {
        const url = `${API_BASE}?text=${demo.text}&voice=${demo.voice}&name=${demo.name}`;
        const filename = `${demo.name}.mp3`;
        
        console.log(`   üé§ ${demo.voice}: ${decodeURIComponent(demo.text.replace(/%/g, '%25'))}...`);
        const success = await downloadAudio(url, filename);
        
        if (success) demoSuccess++;
        await new Promise(resolve => setTimeout(resolve, 400));
    }
    
    return demoSuccess;
}

async function generateVoiceComparison() {
    console.log('\n‚öñÔ∏è  –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≥–æ–ª–æ—Å—ñ–≤\n');
    
    const comparisonText = 'Tse%20test%20porivnyannya%20holosiv%20ukrainskoyu%20movoyu';
    let comparisonSuccess = 0;
    
    for (const voice of UKRAINIAN_VOICES) {
        const url = `${API_BASE}?text=${comparisonText}&voice=${voice.name}&name=comparison_${voice.name}`;
        const filename = `comparison_${voice.name}.mp3`;
        
        console.log(`   üé≠ ${voice.name}: –¢–µ—Å—Ç –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è...`);
        const success = await downloadAudio(url, filename);
        
        if (success) comparisonSuccess++;
        await new Promise(resolve => setTimeout(resolve, 300));
    }
    
    return comparisonSuccess;
}

async function main() {
    console.log('üá∫üá¶ –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø –£–ö–†–ê–á–ù–°–¨–ö–ò–• –ì–û–õ–û–°–Ü–í TTS\n');
    console.log('=' .repeat(50));
    
    const startTime = Date.now();
    
    try {
        // –û—Å–Ω–æ–≤–Ω—ñ —Ç–µ—Å—Ç–∏ –≥–æ–ª–æ—Å—ñ–≤
        const { successCount, totalTests } = await testVoices();
        
        // –¢–µ—Å—Ç–∏ –≥—É—á–Ω–æ—Å—Ç—ñ
        const volumeSuccess = await testVolumeScales();
        
        // –î–µ–º–æ-–ø–ª–µ–π–ª—ñ—Å—Ç
        const demoSuccess = await createDemoPlaylist();
        
        // –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≥–æ–ª–æ—Å—ñ–≤
        const comparisonSuccess = await generateVoiceComparison();
        
        // –ü—ñ–¥—Å—É–º–∫–∏
        const duration = Math.round((Date.now() - startTime) / 1000);
        const totalSuccess = successCount + volumeSuccess + demoSuccess + comparisonSuccess;
        const totalAllTests = totalTests + VOLUME_TESTS.length + 4 + UKRAINIAN_VOICES.length;
        
        console.log('\n' + '='.repeat(50));
        console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø');
        console.log('='.repeat(50));
        console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ: ${totalSuccess}/${totalAllTests} —Ç–µ—Å—Ç—ñ–≤`);
        console.log(`‚è±Ô∏è  –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${duration} —Å–µ–∫—É–Ω–¥`);
        console.log(`üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤: ${totalSuccess}`);
        
        console.log('\nüéôÔ∏è  –î–æ—Å—Ç—É–ø–Ω—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –≥–æ–ª–æ—Å–∏:');
        UKRAINIAN_VOICES.forEach(voice => {
            console.log(`   ‚Ä¢ ${voice.name} (${voice.gender}) - ${voice.description}`);
        });
        
        console.log('\nüîä –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:');
        console.log('   ‚Ä¢ voice: anatol, natalia');
        console.log('   ‚Ä¢ scale: 0.1-3.0 (—Ä—ñ–≤–µ–Ω—å –≥—É—á–Ω–æ—Å—Ç—ñ)');
        console.log('   ‚Ä¢ name: –Ω–∞–∑–≤–∞ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
        
        console.log('\nüí° –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:');
        console.log('   üåê –í–µ–±: https://8a42c760f69d.ngrok-free.app/tts?text=–ü—Ä–∏–≤—ñ—Ç&voice=natalia');
        console.log('   üì± –õ–æ–∫–∞–ª—å–Ω–æ: http://localhost:8080?text=–ü—Ä–∏–≤—ñ—Ç&voice=anatol&scale=1.5');
        
        if (totalSuccess === totalAllTests) {
            console.log('\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ! –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ TTS –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.');
        } else {
            console.log(`\n‚ö†Ô∏è  ${totalAllTests - totalSuccess} —Ç–µ—Å—Ç—ñ–≤ –Ω–µ –≤–¥–∞–ª–æ—Å—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑'—î–¥–Ω–∞–Ω–Ω—è.`);
        }
        
    } catch (error) {
        console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
main().catch(console.error);
