#!/usr/bin/env bash
set -Eeuo pipefail

# restart_server.sh ‚Äî –±–µ–∑–ø–µ—á–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ OpenAI proxy —Å–µ—Ä–≤–µ—Ä–∞ –∑ –ø—Ä–æ—Å—Ç–∏–º —á–∞—Ç–æ–º
# - –ó—É–ø–∏–Ω—è—î –ø—Ä–æ—Ü–µ—Å, —â–æ —Å–ª—É—Ö–∞—î –ø–æ—Ä—Ç (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 3010)
# - –ó–∞–ø—É—Å–∫–∞—î —Å–µ—Ä–≤–µ—Ä —É —Ñ–æ–Ω—ñ —á–µ—Ä–µ–∑ `node server.js`
# - –ó–∞–ø–∏—Å—É—î –ª–æ–≥ –≤ server.log —Ç–∞ PID –≤ server.pid
# - –†–æ–±–∏—Ç—å health-check /health
# - –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∞—Ç—É –∑ 24 AI –º–æ–¥–µ–ª—è–º–∏
#
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
#   ./restart_server.sh               # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É 3010
#   PORT=3011 ./restart_server.sh     # –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø–æ—Ä—Ç —ñ–∑ –æ—Ç–æ—á–µ–Ω–Ω—è
#   ./restart_server.sh -p 3012       # –≤–∫–∞–∑–∞—Ç–∏ –ø–æ—Ä—Ç –ø—Ä–∞–ø–æ—Ä–æ–º
#   ./restart_server.sh -d            # debug —Ä–µ–∂–∏–º –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏ –ª–æ–≥–∞–º–∏
#
# –í–∏–º–æ–≥–∏: lsof, curl, node

PORT="${PORT:-3010}"
LOG_FILE="server.log"
PID_FILE="server.pid"
HEALTH_PATH="/health"
SIMPLE_CHAT_PATH="/simple.html"
MAX_WAIT_KILL=5        # —Å–µ–∫
MAX_WAIT_HEALTH=30     # —á–∏—Å–ª–æ —Å–ø—Ä–æ–±
HEALTH_DELAY=0.5       # —Å–µ–∫ –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏
DEBUG_MODE=false       # –¥–µ—Ç–∞–ª—å–Ω—ñ –ª–æ–≥–∏

usage() {
  echo "Usage: $0 [-p PORT] [-d] [-h]" >&2
  echo "  -p PORT   –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –≤–∫–∞–∑–∞–Ω–∏–π –ø–æ—Ä—Ç (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 3010)" >&2
  echo "  -d        –£–≤—ñ–º–∫–Ω—É—Ç–∏ debug —Ä–µ–∂–∏–º" >&2
  echo "  -h        –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É" >&2
}

while getopts ":p:dh" opt; do
  case "$opt" in
    p) PORT="$OPTARG" ;;
    d) DEBUG_MODE=true ;;
    h) usage; exit 0 ;;
    :) echo "Option -$OPTARG requires an argument" >&2; usage; exit 2 ;;
    \?) echo "Unknown option: -$OPTARG" >&2; usage; exit 2 ;;
  esac
done

require_cmd() {
  command -v "$1" >/dev/null 2>&1 || {
    echo "–ü–æ–º–∏–ª–∫–∞: –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '$1' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" >&2
    echo "–°–ø—Ä–æ–±—É–π—Ç–µ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ó—ó:" >&2
    case "$1" in
      lsof) echo "  brew install lsof  # –Ω–∞ macOS" >&2 ;;
      curl) echo "  brew install curl  # –Ω–∞ macOS" >&2 ;;
      node) echo "  brew install node  # –Ω–∞ macOS –∞–±–æ https://nodejs.org" >&2 ;;
    esac
    exit 127
  }
}

require_cmd lsof
require_cmd curl
require_cmd node

debug_log() {
  if [[ "$DEBUG_MODE" == "true" ]]; then
    echo "[DEBUG] $*" >&2
  fi
}

get_listen_pids() {
  # –í–∏–≤–æ–¥–∏—Ç—å PID(–∏), —â–æ —Å–ª—É—Ö–∞—é—Ç—å –≤–∫–∞–∑–∞–Ω–∏–π –ø–æ—Ä—Ç
  debug_log "–®—É–∫–∞—é –ø—Ä–æ—Ü–µ—Å–∏ –Ω–∞ –ø–æ—Ä—Ç—É $PORT"
  lsof -t -nP -iTCP:"$PORT" -sTCP:LISTEN 2>/dev/null || true
}

kill_pids() {
  local pids=("$@")
  [[ ${#pids[@]} -eq 0 ]] && return 0
  echo "üõë –ó—É–ø–∏–Ω—è—é –ø—Ä–æ—Ü–µ—Å(–∏) –Ω–∞ –ø–æ—Ä—Ç—É $PORT: ${pids[*]}"
  kill "${pids[@]}" 2>/dev/null || true

  local waited=0
  while [[ $waited -lt $MAX_WAIT_KILL ]]; do
    sleep 1
    waited=$((waited+1))
    local still
    still=$(get_listen_pids)
    if [[ -z "$still" ]]; then
      debug_log "–ü—Ä–æ—Ü–µ—Å–∏ –∑—É–ø–∏–Ω–µ–Ω–æ –∑–∞ $waited —Å–µ–∫"
      break
    fi
    debug_log "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–∫–∏... ($waited/$MAX_WAIT_KILL)"
  done

  local still
  still=$(get_listen_pids)
  if [[ -n "$still" ]]; then
    echo "‚ö° –ü—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: $still"
    kill -9 $still 2>/dev/null || true
  fi
}

start_server() {
  echo "üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É $PORT..."
  
  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å server.js
  if [[ ! -f "server.js" ]]; then
    echo "‚ùå –§–∞–π–ª server.js –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Ç–æ—á–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó" >&2
    exit 1
  fi
  
  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å public/simple.html
  if [[ ! -f "public/simple.html" ]]; then
    echo "‚ùå –§–∞–π–ª public/simple.html –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –ø—Ä–æ—Å—Ç–∏–π —á–∞—Ç –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ" >&2
    exit 1
  fi
  
  # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä–∏–π –ª–æ–≥ –ø—Ä–∏ debug —Ä–µ–∂–∏–º—ñ
  if [[ "$DEBUG_MODE" == "true" ]]; then
    > "$LOG_FILE"
    debug_log "–û—á–∏—Å—Ç–∏–≤ –ª–æ–≥ —Ñ–∞–π–ª $LOG_FILE"
  fi
  
  # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä
  debug_log "–ö–æ–º–∞–Ω–¥–∞: nohup node server.js"
  nohup env PORT="$PORT" node server.js >> "$LOG_FILE" 2>&1 &
  local pid=$!
  echo "$pid" > "$PID_FILE"
  echo "‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∑ PID $pid (–ª–æ–≥: $LOG_FILE, pid: $PID_FILE)"
}

wait_health() {
  local attempts=$MAX_WAIT_HEALTH
  local health_url="http://127.0.0.1:$PORT$HEALTH_PATH"
  local simple_url="http://127.0.0.1:$PORT$SIMPLE_CHAT_PATH"
  
  echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞..."
  
  for ((i=1; i<=attempts; i++)); do
    debug_log "–°–ø—Ä–æ–±–∞ $i/$attempts: –ø–µ—Ä–µ–≤—ñ—Ä—è—é $health_url"
    
    if curl -fsS --max-time 3 "$health_url" >/dev/null 2>&1; then
      echo "‚úÖ Health OK at $health_url"
      
      # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∞—Ç—É
      if curl -fsS --max-time 3 "$simple_url" >/dev/null 2>&1; then
        echo "‚úÖ Simple chat OK at $simple_url"
      else
        echo "‚ö†Ô∏è  Simple chat –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π at $simple_url"
      fi
      
      echo ""
      echo "üéâ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤–∏–π!"
      echo "ÔøΩ –ü—Ä–æ—Å—Ç–∏–π —á–∞—Ç –∑ —É—Å—ñ–º–∞ 24 –º–æ–¥–µ–ª—è–º–∏: http://127.0.0.1:$PORT"
      echo "ü§ñ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ OpenAI, Microsoft, AI21, Cohere, Meta, Mistral"
      
      return 0
    fi
    
    if ((i % 5 == 0)); then
      echo "‚è≥ –û—á—ñ–∫—É—é –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞... ($i/$attempts —Å–ø—Ä–æ–±)"
    fi
    
    sleep "$HEALTH_DELAY"
  done
  
  echo "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—ñ—Å–ª—è $attempts —Å–ø—Ä–æ–± ($health_url)" >&2
  echo "üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏: tail -f $LOG_FILE" >&2
  return 1
}

main() {
  echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ—Ä—Ç $PORT)..."
  
  if [[ "$DEBUG_MODE" == "true" ]]; then
    echo "üêõ Debug —Ä–µ–∂–∏–º —É–≤—ñ–º–∫–Ω–µ–Ω–æ"
  fi

  # 1) –ó—É–ø–∏–Ω–∏—Ç–∏, —è–∫—â–æ —î
  # macOS bash 3.x —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å: –Ω–µ–º–∞—î mapfile/readarray
  pids_str="$(get_listen_pids)"
  if [[ -n "$pids_str" ]]; then
    # –†–æ–∑–±–∏—Ç–∏ —Ä—è–¥–æ–∫ PID-—ñ–≤ —É –º–∞—Å–∏–≤
    IFS=$' \t\r\n' read -r -a pids <<< "$pids_str"
    kill_pids "${pids[@]}"
  else
    echo "‚ÑπÔ∏è  –ù–µ–º–∞—î –ø—Ä–æ—Ü–µ—Å—ñ–≤ –Ω–∞ –ø–æ—Ä—Ç—É $PORT"
  fi

  # 2) –°—Ç–∞—Ä—Ç
  start_server

  # 3) Health-check
  wait_health || {
    echo "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä" >&2
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –∑ –ª–æ–≥—É
    if [[ -f "$LOG_FILE" ]]; then
      echo "üìã –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –∑ –ª–æ–≥—É:"
      tail -n 10 "$LOG_FILE" | grep -E "(error|Error|ERROR)" || echo "–ü–æ–º–∏–ª–æ–∫ —É –ª–æ–≥–∞—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    fi
    
    return 1
  }

  # 4) –ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ —Ä—è–¥–∫–∏ –ª–æ–≥—É
  if [[ -f "$LOG_FILE" ]]; then
    echo ""
    echo "üìã –û—Å—Ç–∞–Ω–Ω—ñ 5 —Ä—è–¥–∫—ñ–≤ –ª–æ–≥—É:"
    tail -n 5 "$LOG_FILE" || true
  fi
  
  echo ""
  echo "üéØ –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –∑ —É—Å—ñ–º–∞ –º–æ–¥–µ–ª—è–º–∏:"
  echo "curl -X POST http://127.0.0.1:$PORT/v1/chat/completions -H 'Content-Type: application/json' -d '{\"messages\":[{\"role\":\"user\",\"content\":\"–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∞—Ç—É –∑ 24 –º–æ–¥–µ–ª—è–º–∏!\"}], \"model\":\"gpt-4o-mini\"}'"
}

main "$@"
